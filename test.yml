jobs:
- job: Windows_MustPass
  strategy:
    maxParallel: 10
    matrix:
      Node 0.10:
        NODE_VERSION: '0.10'
      Node 0.12:
        NODE_VERSION: '0.12'
      Node 1.8:
        NODE_VERSION: '1.8'
      Node 2.5:
        NODE_VERSION: '2.5'
      Node 3.3:
        NODE_VERSION: '3.3'
      Node 4.9:
        NODE_VERSION: '4.9'
      Node 5.12:
        NODE_VERSION: '5.12'
      Node 6.14:
        NODE_VERSION: '6.14'
      Node 7.10:
        NODE_VERSION: '7.10'
      Node 8.12:
        NODE_VERSION: '8.12'
      

  continueOnError: false
  pool:
    vmImage: 'vs2017-win2016'

  steps:
  #This is node tool task, which works for all but 1.8, 2.5, 3.3
  #- task: NodeTool@0
  #  displayName: "Use Node $(NODE_VERSION)"
  #  inputs:
  #    versionSpec: $(NODE_VERSION)
  #    checkLatest: true

#- powershell: |
#    npm cache clean --force
#  displayName: "npm cache clean --force"
#
#- powershell: |
#    if(Test-Path -Path "C:\Program Files (x86)\Nodejs")
#    {
#      Remove-Item -Recurse -Force "C:\Program Files (x86)\Nodejs"
#    }
#    if(Test-Path -Path "C:\Program Files\Nodejs")
#    {
#      Remove-Item -Recurse -Force "C:\Program Files\Nodejs"
#    }
#    if(Test-Path -Path "C:\Users\VssAdministrator\AppData\Roaming\npm")
#    {
#      Remove-Item -Recurse -Force "C:\Users\VssAdministrator\AppData\Roaming\npm"
#    }
#    if(Test-Path -Path "C:\Users\VssAdministrator\AppData\Roaming\npm-cache")
#    {
#      Remove-Item -Recurse -Force "C:\Users\VssAdministrator\AppData\Roaming\npm-cache"
#    }
#    if(Test-Path -Path "C:\Users\VssAdministrator\.npmrc")
#    {
#      Remove-Item -Recurse -Force "C:\Users\VssAdministrator\.npmrc"
#    }
#    if(Test-Path -Path "C:\Users\VssAdministrator\npmrc")
#    {
#      Remove-Item -Recurse -Force "C:\Users\VssAdministrator\npmrc"
#    }
#    if(Test-Path -Path "C:\Users\VssAdministrator\AppData\Local\Temp\npm-*")
#    {
#      Remove-Item -Recurse -Force "C:\Users\VssAdministrator\AppData\Local\Temp\npm-*"
#    }
#    if(Test-Path -Path "C:\npm")
#    {
#      Remove-Item -Recurse -Force "C:\npm"
#    }
#    if(Test-Path -Path "C:\ProgramData\Chocolatey\bin")
#    {
#      Remove-Item -Recurse -Force "C:\ProgramData\Chocolatey\bin"
#    }
#    dir "C:\ProgramData\Chocolatey"
#  displayName: "Delete node stuff"
#
#- powershell: |
#    $env:Path
#    $removeThis = ";C:\Program Files\nodejs\;"
#    $oldPath = "$env:Path"
#    $newPath = $oldPath.Replace("$removeThis",";")
#    $removeThis = ";C:\npm\prefix;"
#    $newPath = $newPath.Replace("$removeThis",";")
#    $finalPath = "$newPath"
#    $finalPath
#    #Write-Host "##vso[task.setvariable variable=PATH;]$finalPath";
#    Write-Output ("##vso[task.prependpath]$finalPath")
#    $env:Path
#  displayName: "remove Node From Path"
  
  

 

  #- powershell: |
     #get-wmiobject Win32_Product | Format-Table IdentifyingNumber, Name, LocalPackage -AutoSize
     #{58108C5E-FC5E-4464-8363-BE20821E480B} Node.js 
     #$currentNodeVersion = node --version
     #$nodejsUrl = "https://nodejs.org/dist/index.json"
     #$nodejsList = Invoke-WebRequest -Uri $nodejsUrl
     #$nodejsConverted = ConvertFrom-Json -InputObject $nodejsList
     #$matchValues = $nodejsConverted | Where-Object {$_.version -match "$currentNodeVersion"}
     #$ver = $matchValues[0].version
     #$ver
     #$msi = "node-$ver-x64.msi"
     #$msi
     #$nodejsUrl = "https://nodejs.org/dist/$ver/$msi"
     #$nodejsUrl
     #$file = Join-Path "$(agent.tempDirectory)" "$msi"
     #Invoke-WebRequest -Uri $nodejsUrl -OutFile $file
     #dir $(agent.tempDirectory)
     ##Set variables and attempt to install
     #Write-Output ("Please work")
    # dir "c:\windows\installer"
     #$logFile = Join-Path "$(agent.tempDirectory)" "install.log"
     #$targetDir = "$(agent.tempDirectory)"
     #$MSIArguments = @("/i", "$file", "/qn", "/norestart", "/L*v", $logFile, "ADDLOCAL=ALL", "REMOVE=NodePerfCtrSupport,NodeEtwSupport")
     #$MSIArguments = @("/x", "$file", "/qn", "/norestart", "/L", $logFile)
     ##$MSIArguments = @("/x", "{58108C5E-FC5E-4464-8363-BE20821E480B}", "/qn", "/norestart", "/L*v", $logFile)
     #Start-Process "msiexec.exe" -ArgumentList $MSIArguments -Wait -NoNewWindow
     #dir $(agent.tempDirectory)
     #$iojsDir = "c:\Program Files\iojs"
     #dir "$iojsDir"
     #more $logFile  
   #displayName: "uninstalling current version"

  - powershell: |
      #node --version
      #$currentNodeVersion = node --version
      #$currentNodeVersion
      $env:Path
      $env:PROCESSOR_ARCHITECTURE
      $iojsValues = '1.8','2.5','3.3'
      if ($(NODE_VERSION) -In $iojsValues)
      {
        Write-Information ("iojs")
        $iojsUrl = "https://iojs.org/dist/index.json"
        $iojsList = Invoke-WebRequest -Uri $iojsUrl
        $iojsConverted = ConvertFrom-Json -InputObject $iojsList
        $matchValues = $iojsConverted | Where-Object {$_.version -match "v$(NODE_VERSION)"}
        $ver = $matchValues[0].version
        $ver
        $msi = "iojs-$ver-x64.msi"
        $msi
        $iojsUrl = "https://iojs.org/dist/$ver/$msi"
        $iojsUrl
        $file = Join-Path "$(agent.tempDirectory)" "$msi"
        Invoke-WebRequest -Uri $iojsUrl -OutFile $file
        dir $(agent.tempDirectory)
        ##Set variables and attempt to install
        $logFile = Join-Path "$(agent.tempDirectory)" "install.log"
        $targetDir = "c:\mickey"
        #$MSIArguments = @("/a", "$file", "/qn", "/norestart", "/L", $logFile, "ADDLOCAL=ALL", "TARGETDIR=$targetDir", "REMOVE=NodePerfCtrSupport,NodeEtwSupport")
        $MSIArguments = @("/a", "$file", "/qn", "TARGETDIR=$targetDir", "/L", $logFile)
         #msiexec /a iojs-v1.8.4-x64.msi /qb TARGETDIR=c:\test3\tst
        Start-Process "msiexec.exe" -ArgumentList $MSIArguments -Wait -NoNewWindow
        dir "c:\mickey"
        #dir "$(agent.tempDirectory)\iojs"
        $iojsDir = "c:\mickey\iojs"
        copy "c:\mickey\iojs\iojs.exe" "c:\mickey\iojs\node.exe"
        dir "c:\mickey\iojs"
        #dir "$iojsDir"
        more $logFile
        $newPath = "$iojsDir;$env:Path"
        $newPath
        Write-Host "##vso[task.setvariable variable=PATH;]$newPath";
        $env:Path
        node --version
      }
      else
      {
        Write-Information ("nodejsjs")
        $nodejsDir = "c:\Program Files\nodejs"
        #dir "$nodejsDir"
        #Remove-Item -Recurse -Force "$nodejsDir"
        $nodejsUrl = "https://nodejs.org/dist/index.json"
        $nodejsList = Invoke-WebRequest -Uri $nodejsUrl
        $nodejsConverted = ConvertFrom-Json -InputObject $nodejsList
        $matchValues = $nodejsConverted | Where-Object {$_.version -match "v$(NODE_VERSION)"}
        $ver = $matchValues[0].version
        $ver
        $edgeValues = '0.10','0.12'
        if ($(NODE_VERSION) -In $edgeValues)
        {
          $msi = "node-$ver-x86.msi"
        }
        else
        {
          $msi = "node-$ver-x64.msi"
        }
        $msi = "node-$ver-x64.msi"
        $msi
        $nodejsUrl = "https://nodejs.org/dist/$ver/$msi"
        $nodejsUrl
        $file = Join-Path "$(agent.tempDirectory)" "$msi"
        Invoke-WebRequest -Uri $nodejsUrl -OutFile $file
        dir $(agent.tempDirectory)
        ##Set variables and attempt to install
        $logFile = Join-Path "$(agent.tempDirectory)" "install.log"
        $targetDir = "c:\mickey"
        #$targetDir = "$(agent.tempDirectory)"
        #$MSIArguments = @("/i", "$file", "/fa", "/qn", "/norestart", "/L", $logFile, "ADDLOCAL=ALL", "REMOVE=NodePerfCtrSupport,NodeEtwSupport")
        #$MSIArguments = @("/x", "$file", "/qn", "/norestart", "/L*v", $logFile)
        $MSIArguments = @("/a", "$file", "/qn", "TARGETDIR=$targetDir", "/L", $logFile)
        Start-Process "msiexec.exe" -ArgumentList $MSIArguments -Wait -NoNewWindow
        dir "c:\mickey"
        $nodejsDir = "c:\mickey\nodejs"
        dir "c:\mickey\nodejs"
        #dir "$iojsDir"
        #more $logFile
        $newPath = "$nodejsDir;$env:Path"
        $newPath
        Write-Host "##vso[task.setvariable variable=PATH;]$newPath";
        $env:Path
        node --version
      }
    displayName: "install 3.3"

  - powershell: |
      $env:Path
      node --version
    displayName: "version"

